unit UnitCarrinho;
interface
uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Layouts, FMX.ListBox,
  System.Net.HttpClientComponent;
type
    TFrmCarrinho = class(TForm)
    Label2: TLabel;
    Image2: TImage;
    btnadicionar: TButton;
    Rectangle1: TRectangle;
    Layout1: TLayout;
    lblunidade: TLabel;
    lbltotal: TLabel;
    lbProdutos: TListBox;
    imglimparcarrinho: TImage;
    procedure FormShow(Sender: TObject);
    procedure imglimparcarrinhoClick(Sender: TObject);
    procedure btnadicionarClick(Sender: TObject);
    private
    Fid_produto: integer;
    Fqtd_produto: integer;
    procedure AddProduto(descricao: string; id_produto: integer;
                                 link: string; qtd: integer;
                                 valor: double);
    procedure CarregarCarrinho;
    procedure DownloadFoto(lb: TListBox);
    procedure LoadImageFromURL(img: TBitmap; url: string);
    procedure Qtd(valorqt: integer);
    procedure LimparCarrinho;
    procedure AtualizarQTD(carrinho: String);
        { Private declarations }
  public
    //property qtd_produto: integer read Fid_produto write Fid_produto;
    { Public declarations }
  end;
var
  FrmCarrinho: TFrmCarrinho;
implementation
{$R *.fmx}
uses UnitMercado, Frame.ProdutoLista,
  Firebase.Interfaces,
  Firebase.Auth,
  Firebase.Database,
  System.JSON,
  System.Net.HttpClient,
  System.Generics.Collections,
  System.JSON.Types,
  System.JSON.Writers, UnitLogin, UnitProduto;
procedure TFrmCarrinho.LoadImageFromURL(img: TBitmap; url: string);
var
    http : TNetHTTPClient;
    vStream : TMemoryStream;
begin
    try
        try
            http := TNetHTTPClient.Create(nil);
            vStream :=  TMemoryStream.Create;

            if (Pos('https', LowerCase(url)) > 0) then
                  HTTP.SecureProtocols  := [THTTPSecureProtocol.TLS1,
                                            THTTPSecureProtocol.TLS11,
                                            THTTPSecureProtocol.TLS12];

            http.Get(url, vStream);
            vStream.Position  :=  0;


            img.LoadFromStream(vStream);
        except
        end;

    finally
        vStream.DisposeOf;
        http.DisposeOf;
    end;
end;
 procedure TFrmCarrinho.DownloadFoto(lb: TListBox);
var
    t: TThread;
    foto: TBitmap;
    frame: TFrameProdutoLista;
begin
    // Carregar imagens...
    t := TThread.CreateAnonymousThread(procedure
    var
        i : integer;
    begin

        for i := 0 to lb.Items.Count - 1 do
        begin
            //sleep(1000);
            frame := TFrameProdutoLista(lb.ItemByIndex(i).Components[0]);


            if frame.imgFoto.TagString <> '' then
            begin
                foto := TBitmap.Create;
                LoadImageFromURL(foto, frame.imgFoto.TagString);

                frame.imgFoto.TagString := '';
                frame.imgFoto.bitmap := foto;
            end;
        end;

    end);

    t.Start;
end;
procedure TFrmCarrinho.AddProduto(descricao: string; id_produto: integer;
                                 link: string; qtd: integer;
                                 valor: double);
var
    item: TListBoxItem;
    frame: TFrameProdutoLista;
    lbl: TLabel;
    total: double;

    begin
    item := TListBoxItem.Create(lbProdutos);
    item.Selectable := false;
    item.Text := '';
    item.Height := 80;
    item.Tag := id_produto;
    //Frame
    frame := TFrameProdutoLista.Create(item);
    frame.lbldescricao.text := descricao;
    frame.lblvalor.text := FormatFloat('R$ #,##0.00', qtd * valor);
    frame.lblquant.text := qtd.ToString + ' x ' + FormatFloat('R$ #,##0.00', valor);
    frame.imgfoto.TagString := link;
    item.AddObject(frame);
    lbProdutos.AddObject(item);

end;
procedure TFrmCarrinho.btnadicionarClick(Sender: TObject);
var
  ADatabase: TFirebaseDatabase;
  AResponse: IFirebaseResponse;
  carrinho: TJSONArray;
  Writer: TJsonTextWriter;
  StringWriter: TStringWriter;
  teste: string;
  JSONReq: TJSONObject;
  JSONResp: TJSONValue;
  qtd_requisicao: integer;
  i,id_produto,qtd: Integer;
  valor: double;
const
  DOMAIN = 'https://tcc-4a9dc-default-rtdb.firebaseio.com';
begin
if lbProdutos.Count > 0 then
  begin
    if lbProdutos.Count > 0 then
    begin
      ADatabase := TFirebaseDatabase.Create;
      ADatabase.SetBaseURI(DOMAIN);
      ADatabase.SetToken(unitLogin.token);

      AResponse := ADatabase.Get(['/usuarios/' + localId + '/carrinho.json']);
      carrinho := TJSONObject.ParseJSONValue(AResponse.ContentAsString) as TJSONArray;

      AResponse := ADatabase.Get(['/usuarios/' + localId + '/requisicao.json']);
      if AResponse.ContentAsString.CompareTo('""').ToBoolean then
      begin
        qtd_requisicao :=    (TJSONObject.ParseJSONValue(AResponse.ContentAsString) as TJSONArray).Count;
      end
      else
      begin
         qtd_requisicao := 1;
      end;


      StringWriter := TStringWriter.Create;
      Writer := TJsonTextWriter.Create(StringWriter);
      Writer.Formatting := TJsonFormatting.None;

      //Gerando a requisição de compra
      Writer.WriteStartObject;
      Writer.WritePropertyName(qtd_requisicao.ToString);
      Writer.WriteStartObject;
      Writer.WritePropertyName('id_compra');
      Writer.WriteValue(qtd_requisicao);
      Writer.WritePropertyName('subtotal');
      Writer.WriteValue(lbltotal.Text.Remove(0,3).toDouble);
      Writer.WritePropertyName('status');
      Writer.WriteValue('Em Análise');
      Writer.WritePropertyName('itens');
      Writer.WriteStartObject;
      for i := 1 to carrinho.Count-1 do
      begin
        Writer.WritePropertyName(i.ToString);
        Writer.WriteStartObject;
        Writer.WritePropertyName('id_produto');
        Writer.WriteValue(carrinho.Get(i).GetValue<integer>('id_produto'));
        Writer.WritePropertyName('valor');
        Writer.WriteValue(carrinho.Get(i).GetValue<double>('valor'));
        Writer.WritePropertyName('qtd');
        Writer.WriteValue(carrinho.Get(i).GetValue<integer>('qtd'));
        Writer.WriteEndObject;
      end;
      Writer.WriteEndObject;
      Writer.WriteEndObject;
      Writer.WriteEndObject;

      JSONReq := TJSONObject.ParseJSONValue(StringWriter.ToString) as TJSONObject;
      teste := StringWriter.ToString;

      ADatabase := TFirebaseDatabase.Create;

      ADatabase.SetBaseURI(DOMAIN);
      ADatabase.SetToken(token);

      try
        AResponse := ADatabase.Patch(['/usuarios/' + localId + '/requisicao.json'], JSONReq);

        JSONResp := TJSONObject.ParseJSONValue(AResponse.ContentAsString);
        LimparCarrinho;
        if (not Assigned(JSONResp)) or (not(JSONResp is TJSONObject)) then
        begin
          if Assigned(JSONResp) then
          begin
            JSONResp.Free;
          end;
          Exit;
        end;
      finally
        ADatabase.Free;
      end;
    end;
    AtualizarQTD(carrinho.ToString);

  end;
end;

procedure TFrmCarrinho.AtualizarQTD(carrinho: String);
var
ADatabase: TFirebaseDatabase;
AResponse: IFirebaseResponse;
Writer: TJsonTextWriter;
StringWriter: TStringWriter;
teste: string;
carrinho_Json, produtos, produto_unico: TJSONArray;
JSONReq: TJSONObject;
JSONResp: TJSONValue;
qtd_requisicao: integer;
i,id_produto,qtd: Integer;
const
DOMAIN = 'https://tcc-4a9dc-default-rtdb.firebaseio.com';

begin
  ADatabase := TFirebaseDatabase.Create;
  ADatabase.SetBaseURI(DOMAIN);
  ADatabase.SetToken(unitLogin.token);

  AResponse := ADatabase.Get(['/produtos.json']);
  produtos := TJSONObject.ParseJSONValue(AResponse.ContentAsString) as TJSONArray;
  teste := AResponse.ContentAsString;

  carrinho_Json := TJSONObject.ParseJSONValue(carrinho) as TJSONArray;

  //Criando Tabela Leticia
  StringWriter := TStringWriter.Create;
  Writer := TJsonTextWriter.Create(StringWriter);
  Writer.Formatting := TJsonFormatting.None;

  Writer.WriteStartObject;
  for i := 1 to carrinho_Json.Count-1 do
      begin
        Writer.WritePropertyName(carrinho_Json.Get(i).GetValue<integer>('id_produto').ToString);
        Writer.WriteValue(produtos.Get(carrinho_Json.Get(i).GetValue<integer>('id_produto')).GetValue<integer>('qtd') - carrinho_Json.Get(i).GetValue<integer>('qtd'));
      end;
  Writer.WriteEndObject;

  JSONReq := TJSONObject.ParseJSONValue(StringWriter.ToString) as TJSONObject;
  teste :=    StringWriter.ToString;

  ADatabase.SetBaseURI(DOMAIN);
  ADatabase.SetToken(token);

  try
    AResponse := ADatabase.Patch(['/app.json'], JSONReq);
    JSONResp := TJSONObject.ParseJSONValue(AResponse.ContentAsString);


    if (not Assigned(JSONResp)) or (not(JSONResp is TJSONObject)) then
    begin
      if Assigned(JSONResp) then
      begin
        JSONResp.Free;
      end;
      Exit;
    end;
  finally
    ADatabase.Free;
  end;

  for i := 1 to carrinho_Json.Count-1 do
  begin

    (produtos.Items[carrinho_Json.Get(i).GetValue<integer>('id_produto')]);

  end;



end;

procedure TFrmCarrinho.CarregarCarrinho;
var
  ADatabase: TFirebaseDatabase;
  AResponse: IFirebaseResponse;
  AParams: TDictionary<string, string>;
  JSONResp: TJSONValue;
  i: integer;
  carrinho, produto: TJsonArray;
  item: TJSONObject;
  id, qtd, id_produto: integer;
  valor, total: double;
  descricao, unidade, link, teste: String;
const
  DOMAIN = 'https://tcc-4a9dc-default-rtdb.firebaseio.com';
begin
  lbProdutos.Clear;
  total := 0;
  //Acessar os dados no backend
  ADatabase := TFirebaseDatabase.Create;
  ADatabase.SetBaseURI(DOMAIN);
  ADatabase.SetToken(unitLogin.token);
  AParams := TDictionary<string, string>.Create;
  try
    //Pegando itens do carrinho
    AResponse := ADatabase.Get(['/usuarios/' + localId + '/carrinho.json'], AParams);
    JSONResp := TJSONObject.ParseJSONValue(AResponse.ContentAsString);

    if AResponse.ContentAsString.CompareTo('""').ToBoolean then
    begin
      carrinho := TJSONObject.ParseJSONValue(AResponse.ContentAsString) as TJSONArray;
    end
    else
    begin
      exit;
    end;

    //Adicionando produtos do carrinho
    for i := 1 to carrinho.Size -1 do
    begin
      //Informações do carrinho
      id_produto := carrinho.Get(i).GetValue<integer>('id_produto');
      qtd := carrinho.Get(i).GetValue<integer>('qtd');
      valor := carrinho.Get(i).GetValue<double>('valor');

      //Informações do produto
      AParams.Clear;
      AParams.Add('orderBy', '"$key"');
      AParams.Add('equalTo', '"' + id_produto.ToString + '"');
      AResponse := ADatabase.Get(['/produtos.json'], AParams);
      JSONResp := TJSONObject.ParseJSONValue(AResponse.ContentAsString);
      produto := TJSONObject.ParseJSONValue('[' + AResponse.ContentAsString + ']') as TJSONArray;

      item :=  produto.Get(0).GetValue<TJSONObject>(id_produto.ToString);

      produto := TJSONObject.ParseJSONValue('[' + item.ToString + ']') as TJSONArray;
      descricao := produto.Get(0).GetValue<string>('descricao');;
      id := produto.Get(0).GetValue<integer>('id_produto');
      link := produto.Get(0).GetValue<string>('link');



       total := total + (valor*qtd);
      AddProduto(descricao, id, link, qtd, valor);
    end;

    lbltotal.Text := FormatFloat('R$ #,##0.00', total);

    DownloadFoto(LbProdutos);
    if (not Assigned(JSONResp)) or (not(JSONResp is TJSONObject)) then
    begin
      if Assigned(JSONResp) then
      begin
        JSONResp.Free;
      end;
      Exit;
    end;
    //memoResp.Lines.Add(JSONResp.ToString);
  finally
    AParams.Free;
    ADatabase.Free;
  end;
end;

procedure TFrmCarrinho.Qtd(valorqt: integer);
var

frame: TFrameProdutoLista;
lbl: TLabel;

begin
       //qtd := valorqt;
end;

procedure TFrmCarrinho.FormShow(Sender: TObject);
begin
  CarregarCarrinho;
end;


procedure TFrmCarrinho.imglimparcarrinhoClick(Sender: TObject);
begin
  LimparCarrinho();
end;

procedure TFrmCarrinho.LimparCarrinho;
var
    ADatabase: TFirebaseDatabase;
    AResponse: IFirebaseResponse;
    JSONReq: TJSONObject;
    JSONResp: TJSONValue;
  i: Integer;
const
  DOMAIN = 'https://tcc-4a9dc-default-rtdb.firebaseio.com';
  begin
  lbltotal.Text := FormatFloat('R$ #,##0.00',0);
    if lbprodutos.Count>0 then
    begin
      ADatabase := TFirebaseDatabase.Create;
      ADatabase.SetBaseURI(DOMAIN);
      ADatabase.SetToken(token);
      for i := 1 to lbProdutos.Count do
      begin
        AResponse := ADatabase.Delete(['/usuarios/' + localId + '/carrinho/' + i.ToString + '.json']);
      end;

      JSONResp := TJSONObject.ParseJSONValue(AResponse.ContentAsString);
        if (not Assigned(JSONResp)) or (not(JSONResp is TJSONObject)) then
        begin
          if Assigned(JSONResp) then
          begin
            JSONResp.Free;
          end;
          lbProdutos.Clear;
          Exit;
        end;
        ADatabase.Free;
    end;

  end;

end.
